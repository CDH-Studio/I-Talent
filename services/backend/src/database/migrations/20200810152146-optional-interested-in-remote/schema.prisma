generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model DbSeed {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  FRENCH
  ENGLISH
}

enum UserStatus {
  ACTIVE
  INACTIVE
  HIDDEN
}

enum Proficiency {
  READING
  WRITING
  ORAL
}

enum ProficiencyLevel {
  A
  B
  C
  E
  X
}

enum CardVisibilityStatus {
  PRIVATE
  PUBLIC
  CONNECTIONS
}

model OpTransSecurityClearance {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opSecurityClearance   OpSecurityClearance? @relation(fields: [opSecurityClearanceId])
  opSecurityClearanceId String?
}

model OpSecurityClearance {
  id           String                     @default(uuid()) @id
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  translations OpTransSecurityClearance[]
  users        User[]
}

model OpTransLookingJob {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opLookingJob   OpLookingJob? @relation(fields: [opLookingJobId])
  opLookingJobId String?
}

model OpLookingJob {
  id           String              @default(uuid()) @id
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations OpTransLookingJob[]
  users        User[]
}

model OpTransTenure {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opTenures  OpTenure? @relation(fields: [opTenureId])
  opTenureId String?
}

model OpTenure {
  id           String          @default(uuid()) @id
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  translations OpTransTenure[]
  users        User[]
}

model OpTransCareerMobility {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opCareerMobility   OpCareerMobility? @relation(fields: [opCareerMobilityId])
  opCareerMobilityId String?
}

model OpCareerMobility {
  id           String                  @default(uuid()) @id
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  translations OpTransCareerMobility[]
  users        User[]
}

model OpTransTalentMatrixResult {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opTalentMatrixResult   OpTalentMatrixResult? @relation(fields: [opTalentMatrixResultId])
  opTalentMatrixResultId String?
}

model OpTalentMatrixResult {
  id           String                      @default(uuid()) @id
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  translations OpTransTalentMatrixResult[]
  users        User[]
}

model OpTransOfficeLocation {
  id                 String            @default(uuid()) @id
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  language           Language
  streetName         String
  province           String
  opOfficeLocation   OpOfficeLocation? @relation(fields: [opOfficeLocationId])
  opOfficeLocationId String?
}

model OpOfficeLocation {
  id                  String                  @default(uuid()) @id
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  postalCode          String
  streetNumber        Int
  city                String
  country             String
  translations        OpTransOfficeLocation[]
  relocationLocations RelocationLocation[]
  users               User[]
}

model OpClassification {
  id               String   @default(uuid()) @id
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String   @unique
  actingLevelUsers User[]   @relation("actingLevels")
  groupLevelUsers  User[]   @relation("groupLevels")
}

model OpTransSkill {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opSkill   OpSkill? @relation(fields: [opSkillId])
  opSkillId String?
}

model OpSkill {
  id                 String              @default(uuid()) @id
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  categoryId         String?
  translations       OpTransSkill[]
  category           OpCategory?         @relation(fields: [categoryId])
  mentorshipSkills   MentorshipSkill[]
  skills             Skill[]
  developmentalGoals DevelopmentalGoal[]
}

model OpTransCategory {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opCategory   OpCategory? @relation(fields: [opCategoryId])
  opCategoryId String?
}

model OpCategory {
  id           String            @default(uuid()) @id
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  translations OpTransCategory[]
  opSkills     OpSkill[]
}

model OpTransCompetency {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opCompetency   OpCompetency? @relation(fields: [opCompetencyId])
  opCompetencyId String?
}

model OpCompetency {
  id                 String              @default(uuid()) @id
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  translations       OpTransCompetency[]
  developmentalGoals DevelopmentalGoal[]
  competencies       Competency[]
}

model Competency {
  id           String       @default(uuid()) @id
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  competencyId String
  user         User         @relation(fields: [userId])
  competency   OpCompetency @relation(fields: [competencyId])

  @@unique([userId, competencyId])
}

model OpTransSchool {
  id         String    @default(uuid()) @id
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  language   Language
  name       String
  opSchool   OpSchool? @relation(fields: [opSchoolId])
  opSchoolId String?
}

model OpSchool {
  id           String          @default(uuid()) @id
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  abbrProvince String
  abbrCountry  String
  translations OpTransSchool[]
  educations   Education[]
}

model OpTransDiploma {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  language    Language
  description String
  opDiploma   OpDiploma? @relation(fields: [opDiplomaId])
  opDiplomaId String?
}

model OpDiploma {
  id           String           @default(uuid()) @id
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  translations OpTransDiploma[]
  educations   Education[]
}

model TransEmploymentInfo {
  id               String          @default(uuid()) @id
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  language         Language
  jobTitle         String?
  branch           String?
  employmentInfo   EmploymentInfo? @relation(fields: [employmentInfoId])
  employmentInfoId String?
}

model EmploymentInfo {
  id           String                @default(uuid()) @id
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations TransEmploymentInfo[]
  users        User[]
}

model VisibleCard {
  id                 String               @default(uuid()) @id
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  info               CardVisibilityStatus @default(PRIVATE)
  talentManagement   CardVisibilityStatus @default(PRIVATE)
  officialLanguage   CardVisibilityStatus @default(PRIVATE)
  skills             CardVisibilityStatus @default(PRIVATE)
  developmentalGoals CardVisibilityStatus @default(PRIVATE)
  description        CardVisibilityStatus @default(PRIVATE)
  developmentalGoals CardVisibilityStatus @default(PRIVATE)
  education          CardVisibilityStatus @default(PRIVATE)
  experience         CardVisibilityStatus @default(PRIVATE)
  projects           CardVisibilityStatus @default(PRIVATE)
  careerInterests    CardVisibilityStatus @default(PRIVATE)
  mentorshipSkills   CardVisibilityStatus @default(PRIVATE)
  exFeeder           CardVisibilityStatus @default(PRIVATE)
  users              User[]
}

model MentorshipSkill {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String
  user      User     @relation(fields: [userId])
  skill     OpSkill  @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model Skill {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String
  user      User     @relation(fields: [userId])
  skill     OpSkill  @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model DevelopmentalGoal {
  id           String        @default(uuid()) @id
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  skillId      String?
  competencyId String?
  user         User          @relation(fields: [userId])
  skill        OpSkill?      @relation(fields: [skillId])
  competency   OpCompetency? @relation(fields: [competencyId])

  @@unique([userId, skillId])
  @@unique([userId, competencyId])
}

model SecondLangProf {
  id          String           @default(uuid()) @id
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  date        DateTime?
  proficiency Proficiency
  level       ProficiencyLevel
  user        User             @relation(fields: [userId])

  @@unique([userId, proficiency])
}

model Organization {
  id               String             @default(uuid()) @id
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String
  organizationTier OrganizationTier[]
  user             User               @relation(fields: [userId])
}

model OrganizationTier {
  id             String              @default(uuid()) @id
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tier           Int
  organization   Organization?       @relation(fields: [organizationId])
  translations   TransOrganization[]
  organizationId String?
}

model TransOrganization {
  id                 String            @default(uuid()) @id
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  language           Language
  description        String
  organizationTier   OrganizationTier? @relation(fields: [organizationTierId])
  organizationTierId String?
}

model Education {
  id        String     @default(uuid()) @id
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  schoolId  String?
  diplomaId String?
  endDate   DateTime?
  startDate DateTime
  user      User       @relation(fields: [userId])
  school    OpSchool?  @relation(fields: [schoolId])
  diploma   OpDiploma? @relation(fields: [diplomaId])

  @@unique([userId, schoolId, diplomaId, startDate])
}

model TransExperience {
  id           String      @default(uuid()) @id
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  language     Language
  description  String?
  jobTitle     String
  organization String
  experience   Experience? @relation(fields: [experienceId])
  experienceId String?
}

model Experience {
  id           String            @default(uuid()) @id
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  translations TransExperience[]
  userId       String
  startDate    DateTime
  endDate      DateTime?
  user         User              @relation(fields: [userId])
}

model RelocationLocation {
  id         String           @default(uuid()) @id
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  userId     String
  locationId String
  user       User             @relation(fields: [userId])
  location   OpOfficeLocation @relation(fields: [locationId])

  @@unique([userId, locationId])
}

model User {
  id                   String                @default(uuid()) @id
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  groupLevelId         String?
  actingLevelId        String?
  securityClearanceId  String?
  lookingJobId         String?
  tenureId             String?
  careerMobilityId     String?
  employmentInfoId     String?
  talentMatrixResultId String?
  officeLocationId     String?
  visibleCardId        String
  name                 String?
  firstName            String?
  lastName             String?
  avatarColor          String?
  email                String?
  telephone            String?
  cellphone            String?
  manager              String?
  description          String?
  firstLanguage        Language?
  secondLanguage       Language?
  preferredLanguage    Language              @default(ENGLISH)
  actingStartDate      DateTime?
  actingEndDate        DateTime?
  linkedin             String?
  github               String?
  gcconnex             String?
  exFeeder             Boolean               @default(false)
  interestedInRemote   Boolean?
  status               UserStatus            @default(ACTIVE)
  signupStep           Int                   @default(1)
  projects             String[]
  teams                String[]
  groupLevel           OpClassification?     @relation(fields: [groupLevelId], name: "groupLevels")
  actingLevel          OpClassification?     @relation(fields: [actingLevelId], name: "actingLevels")
  securityClearance    OpSecurityClearance?  @relation(fields: [securityClearanceId])
  lookingJob           OpLookingJob?         @relation(fields: [lookingJobId])
  tenure               OpTenure?             @relation(fields: [tenureId])
  careerMobility       OpCareerMobility?     @relation(fields: [careerMobilityId])
  employmentInfo       EmploymentInfo?       @relation(fields: [employmentInfoId])
  talentMatrixResult   OpTalentMatrixResult? @relation(fields: [talentMatrixResultId])
  officeLocation       OpOfficeLocation?     @relation(fields: [officeLocationId])
  visibleCards         VisibleCard           @relation(fields: [visibleCardId])
  mentorshipSkills     MentorshipSkill[]
  skills               Skill[]
  developmentalGoals   DevelopmentalGoal[]
  competencies         Competency[]
  secondLangProfs      SecondLangProf[]
  organizations        Organization[]
  educations           Education[]
  experiences          Experience[]
  relocationLocations  RelocationLocation[]
  connections          User[]
  user                 User?                 @relation("UserToUser", fields: [userId])
  userId               String?
}
