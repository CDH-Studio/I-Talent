generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model DbSeed {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  FRENCH
  ENGLISH
}

enum UserStatus {
  ACTIVE
  INACTIVE
  HIDDEN
}

enum Proficiency {
  READING
  WRITING
  ORAL
}

enum ProficiencyLevel {
  A
  B
  C
  E
  X
  NA
}

enum CardVisibilityStatus {
  PRIVATE
  PUBLIC
  CONNECTIONS
}

enum EmploymentEquityGroup {
  WOMEN
  INDIGENOUS
  DISABILITY
  MINORITY
}

model OpTransSecurityClearance {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  opSecurityClearance   OpSecurityClearance? @relation(fields: [opSecurityClearanceId])
  opSecurityClearanceId String?
  @@unique([language, description])
}

model OpSecurityClearance {
  id           String                     @id @default(uuid())
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  translations OpTransSecurityClearance[]
  users        User[]
}

model OpTransLookingJob {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  opLookingJob   OpLookingJob? @relation(fields: [opLookingJobId])
  opLookingJobId String?
  @@unique([language, description])
}

model OpLookingJob {
  id           String              @id @default(uuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations OpTransLookingJob[]
  users        User[]
}

model OpTransTenure {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  opTenures  OpTenure? @relation(fields: [opTenureId])
  opTenureId String?
  @@unique([language, name])
}

model OpTenure {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  translations OpTransTenure[]
  users        User[]
}

model OpTransCareerMobility {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  opCareerMobility   OpCareerMobility? @relation(fields: [opCareerMobilityId])
  opCareerMobilityId String?
  @@unique([language, description])
}

model OpCareerMobility {
  id           String                  @id @default(uuid())
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  translations OpTransCareerMobility[]
  users        User[]
}

model OpTransTalentMatrixResult {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  opTalentMatrixResult   OpTalentMatrixResult? @relation(fields: [opTalentMatrixResultId])
  opTalentMatrixResultId String?
  @@unique([language, description])
}

model OpTalentMatrixResult {
  id           String                      @id @default(uuid())
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  translations OpTransTalentMatrixResult[]
  users        User[]
}

model OpTransOfficeLocation {
  id                 String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  language           Language
  streetName         String
  province           String
  opOfficeLocation   OpOfficeLocation? @relation(fields: [opOfficeLocationId])
  opOfficeLocationId String?
}

model OpOfficeLocation {
  id           String                  @id @default(uuid())
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  postalCode   String
  streetNumber Int
  city         String
  country      String
  translations OpTransOfficeLocation[]
  users        User[]
}

model OpClassification {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String          @unique
  actingLevelUsers User[]          @relation("actingLevels")
  groupLevelUsers  User[]          @relation("groupLevels")
  qualifiedPools   QualifiedPool[] @relation("classifications")
}

model OpTransSkill {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  opSkill   OpSkill? @relation(fields: [opSkillId])
  opSkillId String?
  @@unique([language, name])
}

model OpSkill {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  categoryId         String?
  translations       OpTransSkill[]
  category           OpCategory?         @relation(fields: [categoryId])
  mentorshipSkills   MentorshipSkill[]
  skills             Skill[]
  developmentalGoals DevelopmentalGoal[]
}

model OpTransCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  opCategory   OpCategory? @relation(fields: [opCategoryId])
  opCategoryId String?
  @@unique([language, name])
}

model OpCategory {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  translations OpTransCategory[]
  opSkills     OpSkill[]
}

model OpTransCompetency {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  opCompetency   OpCompetency? @relation(fields: [opCompetencyId])
  opCompetencyId String?
  @@unique([language, name])
}

model OpCompetency {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  translations       OpTransCompetency[]
  developmentalGoals DevelopmentalGoal[]
  competencies       Competency[]
}

model Competency {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  competencyId String
  user         User         @relation(fields: [userId])
  competency   OpCompetency @relation(fields: [competencyId])

  @@unique([userId, competencyId])
}

model OpTransSchool {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  language   Language
  name       String
  opSchool   OpSchool? @relation(fields: [opSchoolId])
  opSchoolId String?
}

model OpSchool {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  abbrProvince String
  abbrCountry  String
  translations OpTransSchool[]
  educations   Education[]
}

model OpTransDiploma {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  language    Language
  description String
  opDiploma   OpDiploma? @relation(fields: [opDiplomaId])
  opDiplomaId String?
}

model OpDiploma {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  translations OpTransDiploma[]
  educations   Education[]
}

model OpTransRelocationLocation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  city      String
  province  String

  opRelocationLocation   OpRelocationLocation? @relation(fields: [opRelocationLocationId])
  opRelocationLocationId String?
  @@unique([language, city, province])
}

model OpRelocationLocation {
  id                 String                      @id @default(uuid())
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  translations       OpTransRelocationLocation[]
  RelocationLocation RelocationLocation[]
}

model TransEmploymentInfo {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  language         Language
  jobTitle         String?
  branch           String?
  employmentInfo   EmploymentInfo? @relation(fields: [employmentInfoId])
  employmentInfoId String?
}

model EmploymentInfo {
  id           String                @id @default(uuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations TransEmploymentInfo[]
  users        User[]
}

model VisibleCard {
  id                    String               @id @default(uuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  info                  CardVisibilityStatus @default(PRIVATE)
  talentManagement      CardVisibilityStatus @default(PRIVATE)
  officialLanguage      CardVisibilityStatus @default(PRIVATE)
  skills                CardVisibilityStatus @default(PRIVATE)
  competencies          CardVisibilityStatus @default(PRIVATE)
  developmentalGoals    CardVisibilityStatus @default(PRIVATE)
  qualifiedPools        CardVisibilityStatus @default(PRIVATE)
  description           CardVisibilityStatus @default(PRIVATE)
  education             CardVisibilityStatus @default(PRIVATE)
  experience            CardVisibilityStatus @default(PRIVATE)
  careerInterests       CardVisibilityStatus @default(PRIVATE)
  mentorshipSkills      CardVisibilityStatus @default(PRIVATE)
  exFeeder              CardVisibilityStatus @default(PRIVATE)
  employmentEquityGroup CardVisibilityStatus @default(PRIVATE)
  users                 User[]
}

model MentorshipSkill {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String
  user      User     @relation(fields: [userId])
  skill     OpSkill  @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model Skill {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String
  user      User     @relation(fields: [userId])
  skill     OpSkill  @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model DevelopmentalGoal {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  skillId      String?
  competencyId String?
  user         User          @relation(fields: [userId])
  skill        OpSkill?      @relation(fields: [skillId])
  competency   OpCompetency? @relation(fields: [competencyId])

  @@unique([userId, skillId])
  @@unique([userId, competencyId])
}

model QualifiedPool {
  id                     String            @id @default(uuid())
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  userId                 String
  classificationId       String?
  jobTitle               String?
  selectionProcessNumber String?
  jobPosterLink          String?
  user                   User              @relation(fields: [userId])
  classification         OpClassification? @relation("classifications", fields: [classificationId], references: [id])
}

model SecondLangProf {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String
  date               DateTime?
  unknownExpiredDate Boolean?         @default(false)
  proficiency        Proficiency
  level              ProficiencyLevel
  user               User             @relation(fields: [userId])

  @@unique([userId, proficiency])
}

model Organization {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userId           String
  organizationTier OrganizationTier[]
  user             User               @relation(fields: [userId])
}

model OrganizationTier {
  id             String              @id @default(uuid())
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tier           Int
  organization   Organization?       @relation(fields: [organizationId])
  translations   TransOrganization[]
  organizationId String?
}

model TransOrganization {
  id                 String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  language           Language
  description        String
  organizationTier   OrganizationTier? @relation(fields: [organizationTierId])
  organizationTierId String?
}

model Education {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  schoolId        String?
  diplomaId       String?
  endDate         DateTime?
  startDate       DateTime?
  ongoingDate     Boolean          @default(false)
  description     String?
  attachmentLinks AttachmentLink[]
  user            User             @relation(fields: [userId])
  school          OpSchool?        @relation(fields: [schoolId])
  diploma         OpDiploma?       @relation(fields: [diplomaId])

  @@unique([userId, schoolId, diplomaId, startDate])
}

model TransExperience {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  language     Language
  description  String?
  jobTitle     String
  organization String
  experience   Experience? @relation(fields: [experienceId])
  experienceId String?
}

model Experience {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  translations    TransExperience[]
  userId          String
  startDate       DateTime
  endDate         DateTime?
  ongoingDate     Boolean           @default(false)
  projects        String[]
  attachmentLinks AttachmentLink[]
  user            User              @relation(fields: [userId])
}

model RelocationLocation {
  id                   String               @id @default(uuid())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  relocationLocationId String
  relocationLocation   OpRelocationLocation @relation(fields: [relocationLocationId])
  userId               String
  user                 User                 @relation(fields: [userId])

  @@unique([userId, relocationLocationId])
}

model OpTransAttachmentLinkName {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  OpAttachmentLinkName   OpAttachmentLinkName? @relation(fields: [opAttachmentLinkNameId], references: [id])
  opAttachmentLinkNameId String?
}

model OpAttachmentLinkName {
  id                  String                      @id @default(uuid())
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  type                String
  translations        OpTransAttachmentLinkName[]
  TransAttachmentLink TransAttachmentLink[]
}

model TransAttachmentLink {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  nameId    String
  url       String

  name             OpAttachmentLinkName @relation(fields: [nameId])
  AttachmentLink   AttachmentLink?      @relation(fields: [attachmentLinkId], references: [id])
  attachmentLinkId String?
}

model AttachmentLink {
  id           String                @id @default(uuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations TransAttachmentLink[]

  Experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId String?
  Education    Education?  @relation(fields: [educationId], references: [id])
  educationId  String?
  User         User?       @relation(fields: [userId], references: [id])
  userId       String?
}

model User {
  id                            String                  @id @default(uuid())
  createdAt                     DateTime                @default(now())
  updatedAt                     DateTime                @updatedAt
  groupLevelId                  String?
  actingLevelId                 String?
  securityClearanceId           String?
  lookingJobId                  String?
  tenureId                      String?
  careerMobilityId              String?
  employmentInfoId              String?
  talentMatrixResultId          String?
  officeLocationId              String?
  visibleCardId                 String
  name                          String?
  firstName                     String?
  lastName                      String?
  avatarColor                   String?
  email                         String?
  telephone                     String?
  cellphone                     String?
  manager                       String?
  description                   String?
  firstLanguage                 Language?
  secondLanguage                Language?
  preferredLanguage             Language                @default(ENGLISH)
  actingStartDate               DateTime?
  actingEndDate                 DateTime?
  linkedin                      String?
  github                        String?
  gcconnex                      String?
  exFeeder                      Boolean                 @default(false)
  interestedInRemote            Boolean?
  status                        UserStatus              @default(ACTIVE)
  signupStep                    Int                     @default(1)
  teams                         String[]
  groupLevel                    OpClassification?       @relation(fields: [groupLevelId], name: "groupLevels")
  actingLevel                   OpClassification?       @relation(fields: [actingLevelId], name: "actingLevels")
  securityClearance             OpSecurityClearance?    @relation(fields: [securityClearanceId])
  lookingJob                    OpLookingJob?           @relation(fields: [lookingJobId])
  tenure                        OpTenure?               @relation(fields: [tenureId])
  careerMobility                OpCareerMobility?       @relation(fields: [careerMobilityId])
  employmentInfo                EmploymentInfo?         @relation(fields: [employmentInfoId])
  talentMatrixResult            OpTalentMatrixResult?   @relation(fields: [talentMatrixResultId])
  officeLocation                OpOfficeLocation?       @relation(fields: [officeLocationId])
  visibleCards                  VisibleCard             @relation(fields: [visibleCardId])
  mentorshipSkills              MentorshipSkill[]
  skills                        Skill[]
  developmentalGoals            DevelopmentalGoal[]
  developmentalGoalsAttachments AttachmentLink[]
  qualifiedPools                QualifiedPool[]
  competencies                  Competency[]
  secondLangProfs               SecondLangProf[]
  organizations                 Organization[]
  educations                    Education[]
  experiences                   Experience[]
  relocationLocations           RelocationLocation[]
  employmentEquityGroups        EmploymentEquityGroup[]
  connections                   User[]                  @relation("UserToUser")
  user                          User?                   @relation("UserToUser", fields: [userId])
  userId                        String?
}
