generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dbSeeds {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  FRENCH
  ENGLISH
}

enum UserStatus {
  ACTIVE
  INACTIVE
  HIDDEN
}

enum Proficiency {
  READING
  WRITING
  ORAL
}

enum ProficiencyLevel {
  A
  B
  C
  E
  X
}

model opTransSecurityClearances {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opSecurityClearances   opSecurityClearances? @relation(fields: [opSecurityClearancesId], references: [id])
  opSecurityClearancesId String?
}

model opSecurityClearances {
  id           String                      @default(uuid()) @id
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt
  translations opTransSecurityClearances[]
  users        users[]
}

model opTransLookingJobs {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opLookingJobs   opLookingJobs? @relation(fields: [opLookingJobsId], references: [id])
  opLookingJobsId String?
}

model opLookingJobs {
  id           String               @default(uuid()) @id
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  translations opTransLookingJobs[]
  users        users[]
}

model opTransTenures {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opTenures   opTenures? @relation(fields: [opTenuresId], references: [id])
  opTenuresId String?
}

model opTenures {
  id           String           @default(uuid()) @id
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  translations opTransTenures[]
  users        users[]
}

model opTransCareerMobilities {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opCareerMobilities   opCareerMobilities? @relation(fields: [opCareerMobilitiesId], references: [id])
  opCareerMobilitiesId String?
}

model opCareerMobilities {
  id           String                    @default(uuid()) @id
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  translations opTransCareerMobilities[]
  users        users[]
}

model opTransTalentMatrixResults {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  language    Language
  description String

  @@unique([language, description])
  opTalentMatrixResults   opTalentMatrixResults? @relation(fields: [opTalentMatrixResultsId], references: [id])
  opTalentMatrixResultsId String?
}

model opTalentMatrixResults {
  id           String                       @default(uuid()) @id
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  translations opTransTalentMatrixResults[]
  users        users[]
}

model opTransOfficeLocations {
  id                  String             @default(uuid()) @id
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  language            Language
  streetName          String
  province            String
  opOfficeLocations   opOfficeLocations? @relation(fields: [opOfficeLocationsId], references: [id])
  opOfficeLocationsId String?
}

model opOfficeLocations {
  id                  String                   @default(uuid()) @id
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  postalCode          String
  streetNumber        Int
  city                String
  country             String
  translations        opTransOfficeLocations[]
  relocationLocations relocationLocations[]
  users               users[]
}

model opClassifications {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  actingLevelUsers users[] @relation("actingLevels")
  groupLevelUsers  users[] @relation("groupLevels")
}

model opTransSkills {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opSkills   opSkills? @relation(fields: [opSkillsId], references: [id])
  opSkillsId String?
}

model opSkills {
  id         String   @default(uuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String?

  translations       opTransSkills[]
  category           opCategories?        @relation(fields: [categoryId])
  mentorshipSkills   mentorshipSkills[]
  skills             skills[]
  developmentalGoals developmentalGoals[]
}

model opTransCategories {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opCategories   opCategories? @relation(fields: [opCategoriesId], references: [id])
  opCategoriesId String?
}

model opCategories {
  id           String              @default(uuid()) @id
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations opTransCategories[]
  opSkills     opSkills[]
}

model opTransCompetencies {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  Language
  name      String

  @@unique([language, name])
  opCompetencies   opCompetencies? @relation(fields: [opCompetenciesId], references: [id])
  opCompetenciesId String?
}

model opCompetencies {
  id                 String                @default(uuid()) @id
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  translations       opTransCompetencies[]
  developmentalGoals developmentalGoals[]
  competencies       competencies[]
}

model opTransSchools {
  id          String     @default(uuid()) @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  language    Language
  name        String
  opSchools   opSchools? @relation(fields: [opSchoolsId], references: [id])
  opSchoolsId String?
}

model opSchools {
  id           String           @default(uuid()) @id
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  abbrProvince String
  abbrCountry  String
  translations opTransSchools[]
  educations   educations[]
}

model opTransDiplomas {
  id           String      @default(uuid()) @id
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  language     Language
  description  String
  opDiplomas   opDiplomas? @relation(fields: [opDiplomasId], references: [id])
  opDiplomasId String?
}

model opDiplomas {
  id           String            @default(uuid()) @id
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  translations opTransDiplomas[]
  educations   educations[]
}

model transEploymentInfos {
  id                String           @default(uuid()) @id
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  language          Language
  jobTitle          String?
  branch            String?
  employmentInfos   employmentInfos? @relation(fields: [employmentInfosId], references: [id])
  employmentInfosId String?
}

model employmentInfos {
  id           String                @default(uuid()) @id
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations transEploymentInfos[]
  users        users[]
}

model visibleCards {
  id                 String   @default(uuid()) @id
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  info               Boolean  @default(true)
  manager            Boolean  @default(true)
  talentManagement   Boolean  @default(true)
  officialLanguage   Boolean  @default(true)
  skills             Boolean  @default(true)
  competencies       Boolean  @default(true)
  developmentalGoals Boolean  @default(true)
  education          Boolean  @default(true)
  experience         Boolean  @default(true)
  projects           Boolean  @default(true)
  careerInterests    Boolean  @default(true)
  mentorshipSkills   Boolean  @default(true)
  exFeeder           Boolean  @default(true)
  users              users[]
}

model mentorshipSkills {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String

  user  users    @relation(fields: [userId])
  skill opSkills @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model skills {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  skillId   String

  user  users    @relation(fields: [userId])
  skill opSkills @relation(fields: [skillId])

  @@unique([userId, skillId])
}

model developmentalGoals {
  id           String   @default(uuid()) @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  skillId      String?
  competencyId String?

  user       users           @relation(fields: [userId])
  skill      opSkills?       @relation(fields: [skillId])
  competency opCompetencies? @relation(fields: [competencyId])

  @@unique([userId, skillId, competencyId])
}

model competencies {
  id           String   @default(uuid()) @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  competencyId String

  user       users          @relation(fields: [userId])
  competency opCompetencies @relation(fields: [competencyId])

  @@unique([userId, competencyId])
}

model secondLangProfs {
  id          String           @default(uuid()) @id
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  date        DateTime
  proficiency Proficiency
  level       ProficiencyLevel

  user users @relation(fields: [userId])

  @@unique([userId, proficiency])
}

model transOrganizations {
  id              String         @default(uuid()) @id
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  language        Language
  description     String
  organizations   organizations? @relation(fields: [organizationsId], references: [id])
  organizationsId String?
}

model organizations {
  id           String               @default(uuid()) @id
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       String
  tier         Int
  translations transOrganizations[]

  user users @relation(fields: [userId])
}

model educations {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  schoolId  String?
  diplomaId String?
  endDate   DateTime
  startDate DateTime

  user    users       @relation(fields: [userId])
  school  opSchools?  @relation(fields: [schoolId])
  diploma opDiplomas? @relation(fields: [diplomaId])

  @@unique([userId, schoolId, diplomaId, endDate, startDate])
}

model transExperiences {
  id           String   @default(uuid()) @id
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  language     Language
  description  String
  jobTitle     String
  organization String

  @@unique([language, description, jobTitle, organization])
  experiences   experiences? @relation(fields: [experiencesId], references: [id])
  experiencesId String?
}

model experiences {
  id           String             @default(uuid()) @id
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  translations transExperiences[]
  userId       String
  startDate    DateTime
  endDate      DateTime

  user users @relation(fields: [userId])
}

model relocationLocations {
  id         String   @default(uuid()) @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  locationId String

  user     users             @relation(fields: [userId])
  location opOfficeLocations @relation(fields: [locationId])

  @@unique([userId, locationId])
}

model users {
  id        String   @default(uuid()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupLevelId         String?
  actingLevelId        String?
  securityClearanceId  String?
  lookingJobId         String?
  tenureId             String?
  careerMobilityId     String?
  employmentInfoId     String?
  talentMatrixResultId String?
  officeLocationId     String?
  visibleCardId        String

  name               String?
  nameInitials       String?
  firstName          String?
  lastName           String?
  avatarColor        String?
  email              String?
  telephone          String?
  cellphone          String?
  manager            String?
  team               String?
  firstLanguage      Language?
  secondLanguage     Language?
  preferredLanguage  Language   @default(ENGLISH)
  actingStartDate    DateTime?
  actingEndDate      DateTime?
  linkedin           String?
  github             String?
  gcconnex           String?
  exFeeder           Boolean    @default(false)
  mentoring          Boolean    @default(false)
  interestedInRemote Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  projects           String[]

  groupLevel          opClassifications?     @relation(fields: [groupLevelId], name: "groupLevels")
  actingLevel         opClassifications?     @relation(fields: [actingLevelId], name: "actingLevels")
  securityClearance   opSecurityClearances?  @relation(fields: [securityClearanceId])
  lookingJob          opLookingJobs?         @relation(fields: [lookingJobId])
  tenure              opTenures?             @relation(fields: [tenureId])
  careerMobility      opCareerMobilities?    @relation(fields: [careerMobilityId])
  employmentInfo      employmentInfos?       @relation(fields: [employmentInfoId])
  talentMatrixResult  opTalentMatrixResults? @relation(fields: [talentMatrixResultId])
  officeLocation      opOfficeLocations?     @relation(fields: [officeLocationId])
  visibleCards        visibleCards           @relation(fields: [visibleCardId])
  mentorshipSkills    mentorshipSkills[]
  skills              skills[]
  developmentalGoals  developmentalGoals[]
  competencies        competencies[]
  secondLangProfs     secondLangProfs[]
  organizations       organizations[]
  educations          educations[]
  experiences         experiences[]
  relocationLocations relocationLocations[]
}
